---
import { getImage } from '@astrojs/image'
import { Image } from '@astrojs/image/components'
import { MarkdownInstance } from 'astro'
import podcastImage from '../assets/site/podcast-clojure-in.jpg'
import Banner from '../components/Banner.astro'
import Section from '../components/Section.astro'
import { Blog, Person } from '../components/types'
import Layout from '../layouts/Layout.astro'
import { formatDate } from '../utils'

const clojureInBlogs = await Astro.glob<MarkdownInstance<Blog>>(
  './blog/{clojure-in*.mdx, clojure-in*.md}'
)

const filteredBlogs = clojureInBlogs.filter((blog) => !blog.frontmatter?.draft)

const parsedBlogs: Blog[] = await Promise.all(
  filteredBlogs.map(async (blog) => {
    const permalink = blog.file.split('/').slice(-1)[0].split('.')[0]

    const parsedPostImage = blog.frontmatter.heroImage.split('.').slice(0, -1)

    const postImage = await getImage({
      src: import(`../assets/blog/${parsedPostImage}.jpg`),
      width: 450,
      quality: 100,
      alt: 'clojure in blog post image'
    })

    return {
      ...blog.frontmatter,
      href: permalink,
      heroImage: postImage.src
    }
  })
)

const seasonOrder = [
  { value: 'one', label: 'Season One' },
  { value: 'two', label: 'Season Two' }
]

const groupedBlogs: Record<string, { season: string; blogs: Blog[] }> =
  parsedBlogs.reduce((coll, blog) => {
    const season = blog.clojureIn.season
    const currentSeasonBlogs = coll[season]?.blogs || []

    return {
      ...coll,
      [season]: { season: season, blogs: [...currentSeasonBlogs, blog] }
    }
  }, {})

const sortedBlogs = seasonOrder
  .map((season) => {
    const grouped = groupedBlogs[season.value]

    const sortedByDate = grouped?.blogs.sort((a, b) => {
      return (
        new Date(b.publishedDate).getTime() -
        new Date(a.publishedDate).getTime()
      )
    })
    return { season: grouped?.season && season.label, blogs: sortedByDate }
  })
  .filter((blogs) => blogs.season)

const clojureInPicture = await getImage({
  src: import('../assets/site/hero-image-clojurein.jpeg'),
  width: 1700,
  quality: 90,
  alt: 'clojure in logo'
}).then((img) => img.src)

type Podcast = { title: string; href: string }

const podcasts: Podcast[] = [
  {
    title: 'S4E2 - Strange Loop Edition: A Chat with Uncle Bob',
    href: 'https://pnc.st/s/juxt-cast/ecd73f05/strange-loop-edition-a-chat-with-uncle-bob'
  },
  {
    title: 'S3E3 - User Empowerment',
    href: 'https://pnc.st/s/juxt-cast/a775f47f/user-empowerment-s3e2'
  },
  {
    title: 'S2E16 - re:Clojure interview 16 - Eric Normand',
    href: 'https://pnc.st/s/juxt-cast/8caf4b5d/re-clojure-interviews-16-eric-normand'
  },
  {
    title: 'S1E8 - ClojureTre, XTDB, and XT20 News',
    href: 'https://pnc.st/s/juxt-cast/3a7bd843fff4467d/episode-8-clojuretre-crux-and-xt20-news'
  }
]

const people = await Astro.glob<MarkdownInstance<Person>>(
  '../data/people/{*.mdx,*.md}'
)

const blogs = await Astro.glob<MarkdownInstance<Blog>>(
  '../pages/blog/{*.mdx,*.md}'
)

const filteredRecommendedBlogs = blogs.filter(
  (blog) => blog.frontmatter.category === 'clojure'
)

const recommendededBlogs = filteredRecommendedBlogs
  .sort((a, b) => {
    return (
      new Date(b.frontmatter.publishedDate).getTime() -
      new Date(a.frontmatter.publishedDate).getTime()
    )
  })
  .slice(0, 4)

const finalResources = await Promise.all(
  recommendededBlogs.map((page) => {
    const author = page.frontmatter.author
    const person = people.find(
      (person) => person.frontmatter.code === page.frontmatter.author
    )
    if (!person)
      throw new Error(
        `No person found for author: '${author}' in '${page.url}'`
      )
    const permalink = page.file.split('/').slice(-1)[0].split('.')[0]
    const parsedImage = person.frontmatter.image.split('.').slice(0, -1)

    const parsedPostImage = page.frontmatter.heroImage.split('.').slice(0, -1)

    const authorImage = getImage({
      src: import(`../assets/people/${parsedImage}.jpg`),
      width: 200,
      quality: 80,
      alt: 'person'
    })

    const postImage = getImage({
      src: import(`../assets/blog/${parsedPostImage}.jpg`),
      width: 450,
      quality: 100,
      alt: 'post'
    })

    return Promise.all([authorImage, postImage]).then(
      ([authorImage, postImage]) => {
        return {
          ...page.frontmatter,
          slug: page.url.split('/').pop(),
          href: permalink,
          heroImage: postImage.src,
          person: {
            ...person.frontmatter,
            image: authorImage.src
          }
        }
      }
    )
  })
)
---

<Layout navbar title='Clojure In'>
  <main class='bg-zinc-900'>
    <Banner
      text='Clojure In'
      textColor='text-white'
      style={{
        backgroundImage: `url(${clojureInPicture})`
      }}
    />

    <Section className='py-12'>
      <div class='flex flex-col gap-10 text-white lg:w-2/3'>
        <h1 class='text-4xl font-extralight'>
          Case-studies on where Clojure is being used across Europe
        </h1>
        <div>
          <div class='text-xl font-extralight'>
            "Clojure In" is a collection of stories about companies who have
            adopted Clojure. In these articles we interview key individuals
            involved and chat about the challenges, issues, benefits and
            trade-offs in their decision to go with Clojure. <br />
            <br />
            Note that this is a subset of the wider Clojure adoption stories that
            are out there. Please see
            <a href='https://clojure.org/'>clojure.org</a> for an extensive list
            of companies using Clojure and also a list that Cognitect maintain. We
            also have a list of JUXT delivered case-studies.
          </div>
        </div>
      </div>
    </Section>

    <Section className='py-2'>
      <div class='flex flex-col gap-28'>
        {sortedBlogs.map(({ season, blogs }) => {
          return (
            <div class='flex flex-col items-center'>
              <div class='grid md:grid-cols-[repeat(2,_1fr)] xl:grid-cols-[repeat(3,_1fr)] justify-center gap-6 py-12'>
                {blogs.map((blog) => {
                  return (
                    <a
                      href={`/blog/${blog.href}`}
                      class='group cursor-pointer justify-between flex flex-col w-96 mx-auto gap-6'
                    >
                      <div class='text-white flex flex-col justify-between'>
                        <h3 class='text-2xl font-semibold'>{blog.title}</h3>
                        <h5 class='text-lg font-extralight'>
                          {blog.description}
                        </h5>
                      </div>
                      <div class='p-4'>
                        <p class='text-lg font-light dark:text-white text-sky-900'>
                          {formatDate(blog.publishedDate)}
                        </p>
                      </div>
                    </a>
                  )
                })}
              </div>
            </div>
          )
        })}
      </div>
    </Section>
    <Section>
      <h2 class='font-medium text-4xl text-white py-8'>
        Additional Resources:
      </h2>
      <div class='flex flex-col gap-10'>
        <h5 class='font-extralight text-2xl text-white'>Podcast</h5>
        <div
          class='grid md:grid-cols-[repeat(2,_24rem)] xl:grid-cols-[repeat(4,_1fr)] justify-center gap-6 pb-10 text-white'
        >
          {podcasts.map((podcast) => {
            return (
              <a
                href={podcast.href}
                target='_blank'
                class='flex flex-col justify-between gap-3 hover:underline'
              >
                <div class='text-lg'> {podcast.title}</div>
                <Image
                  alt='image'
                  width={600}
                  quality={80}
                  class='aspect-square object-cover'
                  src={podcastImage}
                />
              </a>
            )
          })}
        </div>
        <h5 class='font-extralight text-2xl text-white'>Blog Posts</h5>
        <div
          class='grid md:grid-cols-[repeat(2,_24rem)] xl:grid-cols-[repeat(4,_1fr)] justify-center gap-6 pb-10'
        >
          {finalResources.map((blog) => {
            return (
              <a
                href={`/blog/${blog.href}`}
                target='_blank'
                class='bg-white p-4 flex flex-col gap-4 justify-between text-black'
              >
                <div class='text-xl'>{blog.title}</div>
                <div class='font-light'>{blog.description}</div>
                <div class='flex gap-4 items-end'>
                  <img
                    class='w-20 h-20 object-cover'
                    src={blog.person.image}
                    alt=''
                  />
                  <div class='flex flex-col gap-1 text-sm'>
                    <div class='text-black font-medium underline-offset-2'>
                      <div>
                        {blog.person.name} {blog.person.lastName}
                      </div>
                    </div>
                    <div>{blog.person.jobTitle}</div>
                  </div>
                </div>
              </a>
            )
          })}
        </div>
      </div>
    </Section>
  </main>
</Layout>
