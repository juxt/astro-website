---
import { getRadarStructureColors } from '../utils/radar-colors'

interface Props {
  quadrantName: string
  quadrantColor: string
  data: {
    rings: Array<{ name: string; description?: string }>
    entries: Array<{
      id: number
      label: string
      ring: number // 0=Adopt, 1=Trial, 2=Assess, 3=Hold
      moved?: number
      url?: string
      active?: boolean
      description?: string
    }>
  }
  scale?: number
  fontFamily?: string
}

const {
  quadrantName,
  quadrantColor,
  data,
  scale = 1.0,
  fontFamily = 'Arial, Helvetica'
} = Astro.props

const structureColors = getRadarStructureColors()

// Prepare single quadrant configuration
const singleQuadrantConfig = {
  svg_id: 'single-quadrant-radar',
  scale,
  quadrantName,
  quadrantColor,
  rings: data.rings,
  entries: data.entries,
  font_family: fontFamily,
  colors: {
    background: 'transparent',
    grid: structureColors.grid
  },
  // Mobile-optimized dimensions for better readability
  width: 800,
  height: 500
}
---

<astro-single-radar-config data-config={JSON.stringify(singleQuadrantConfig)}>
  <div class='single-quadrant-radar-container'>
    <svg
      id='single-quadrant-radar'
      class='w-full h-auto'
      viewBox='0 0 800 500'
      xmlns='http://www.w3.org/2000/svg'
    >
    </svg>
  </div>
</astro-single-radar-config>

<script>
  import { single_quadrant_visualization } from '../utils/single-quadrant-generation'
  import { getThemeColors, getQuadrantColor } from '../utils/radar-colors'

  class AstroSingleRadarConfig extends HTMLElement {
    connectedCallback() {
      // Read the config from the data attribute
      const configData = this.dataset.config
      if (!configData) {
        console.error('No single quadrant radar config found')
        return
      }

      const singleQuadrantConfig = JSON.parse(configData)

      const lightThemeColors = getThemeColors(false)
      const darkThemeColors = getThemeColors(true)

      let singleRadarInitialized = false

      // Function to get theme colors based on current mode
      function getSingleQuadrantThemeColors() {
        const isDarkMode = document.documentElement.classList.contains('dark')
        return isDarkMode ? darkThemeColors : lightThemeColors
      }

      // Function to update colors when theme changes
      function updateSingleQuadrantColors() {
        if (!singleRadarInitialized) return

        const themeColors = getSingleQuadrantThemeColors()
        const quadrantColor = getQuadrantColor(
          singleQuadrantConfig.quadrantName
        )

        // Update ring labels to use quadrant color
        document.querySelectorAll('.radar-ring-label').forEach((element) => {
          if (element instanceof SVGElement) {
            element.style.fill = quadrantColor
          }
        })

        // Update background ring text to use quadrant color
        document
          .querySelectorAll('.radar-background-ring-text')
          .forEach((element) => {
            if (element instanceof SVGElement) {
              element.style.fill = quadrantColor
            }
          })

        // Update entry text
        document.querySelectorAll('.radar-entry-text').forEach((element) => {
          if (element instanceof SVGElement) {
            element.style.fill = themeColors.mainTextColor
          }
        })
      }

      // Initialize the single quadrant radar visualization
      document.addEventListener('DOMContentLoaded', function () {
        try {
          const config = {
            ...singleQuadrantConfig,
            themeColors: getSingleQuadrantThemeColors()
          }

          single_quadrant_visualization(config)
          singleRadarInitialized = true

          // Set up observer to watch for theme changes
          const observer = new MutationObserver(
            (mutations: MutationRecord[]) => {
              mutations.forEach((mutation) => {
                if (
                  mutation.type === 'attributes' &&
                  mutation.attributeName === 'class'
                ) {
                  updateSingleQuadrantColors()
                }
              })
            }
          )

          // Start observing the document element for class changes
          observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['class']
          })
        } catch (error) {
          console.error(
            'Failed to load single quadrant radar visualization:',
            error
          )
        }
      })
    }
  }

  customElements.define('astro-single-radar-config', AstroSingleRadarConfig)
</script>

<style>
  .single-quadrant-radar-container {
    @apply w-full;
    /* Increase height on mobile for better readability */
    min-height: 400px;
  }

  .single-quadrant-radar-container svg {
    @apply max-w-full h-auto;
    /* Ensure minimum height on mobile */
    min-height: 400px;
  }

  /* Mobile-specific adjustments */
  @media (max-width: 768px) {
    .single-quadrant-radar-container {
      min-height: 500px;
      /* Add more padding on mobile */
      padding: 1rem 0;
    }

    .single-quadrant-radar-container svg {
      min-height: 500px;
      /* Scale up slightly on mobile for better text readability */
      transform: scale(1.1);
      transform-origin: center;
    }
  }

  /* Small mobile screens */
  @media (max-width: 480px) {
    .single-quadrant-radar-container {
      min-height: 600px;
      padding: 1.5rem 0;
    }

    .single-quadrant-radar-container svg {
      min-height: 600px;
      /* Scale up more on very small screens */
      transform: scale(1.2);
    }
  }
</style>
