---
import { getThemeColors, getRadarStructureColors } from '../utils/radar-colors'

interface Props {
  data: {
    title?: string
    quadrants: Array<{ name: string; color: string }>
    rings: Array<{ name: string }>
    entries: Array<{
      label: string
      quadrant: number
      ring: number
      moved?: number
      url?: string
      active?: boolean
      description?: string
    }>
  }
  scale?: number
  colors?: {
    background: string
    grid: string
    inactive: string
  }
  fontFamily?: string
  printLayout?: boolean
  linksInNewTabs?: boolean
}

const structureColors = getRadarStructureColors()

const {
  data,
  scale = 1.0,
  colors = {
    background: 'transparent',
    grid: structureColors.gridDark,
    inactive: structureColors.inactive
  },
  fontFamily = 'Arial, Helvetica',
  printLayout = true,
  linksInNewTabs = true
} = Astro.props

// Prepare radar configuration
const radarConfig = {
  svg_id: 'radar',
  scale,
  colors,
  font_family: fontFamily,
  title: data.title,
  quadrants: data.quadrants,
  rings: data.rings,
  print_layout: printLayout,
  links_in_new_tabs: linksInNewTabs,
  entries: data.entries
}
---

<div class='w-11/12 mx-auto overflow-hidden flex justify-center items-center'>
  <svg viewBox='0 0 1450 1000' id='radar' class='block max-w-full'></svg>
</div>

<script define:vars={{ radarConfig }}>
  let radarInitialized = false

  // Function to get theme colors based on current mode
  function getThemeColorsForMode() {
    const isDarkMode = document.documentElement.classList.contains('dark')
    return {
      ringTextColor: isDarkMode ? '#9ca3af' : '#6b7280', // gray-400 : gray-500
      mainTextColor: isDarkMode ? '#d1d5db' : '#374151' // gray-300 : gray-700
    }
  }

  // Function to update colors when theme changes
  function updateRadarColors() {
    if (!radarInitialized) return

    const themeColors = getThemeColorsForMode()

    // Update ring labels in legend using class selector
    document.querySelectorAll('.radar-ring-label').forEach((element) => {
      element.style.fill = themeColors.ringTextColor
    })

    // Update entry text using class selector
    document.querySelectorAll('.radar-entry-text').forEach((element) => {
      element.style.fill = themeColors.mainTextColor
    })

    // Update footer legend using class selector
    document.querySelectorAll('.radar-footer-legend').forEach((element) => {
      element.style.fill = themeColors.mainTextColor
    })

    // Update background ring text using class selector
    document
      .querySelectorAll('.radar-background-ring-text')
      .forEach((element) => {
        element.style.fill = themeColors.ringTextColor
      })
  }

  // Initialize the radar visualization
  document.addEventListener('DOMContentLoaded', async function () {
    try {
      // Dynamically import the radar visualization function
      const { radar_visualization } = await import(
        '/src/utils/radar-generation.ts'
      )

      const config = {
        ...radarConfig,
        themeColors: getThemeColorsForMode()
      }

      radar_visualization(config)
      radarInitialized = true

      // Set up observer to watch for theme changes
      const observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
          if (
            mutation.type === 'attributes' &&
            mutation.attributeName === 'class'
          ) {
            updateRadarColors()
          }
        })
      })

      // Start observing the document element for class changes
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ['class']
      })
    } catch (error) {
      console.error('Failed to load radar visualization:', error)
    }
  })
</script>
