---
import { Image } from 'astro:assets'
import { MarkdownInstance } from 'astro'
import '../blog.css'
import { BlogCard } from '@components/BlogCard'
import DraftBanner from '@components/DraftBanner'
import {
  LinkedInIcon,
  RedditIcon,
  TagIcon,
  TwitterIcon
} from '@components/Icons'
import { Blog, Person } from '@utils/types'
import { parseBlogs, formatDate } from '@utils/common'
import Layout from './Layout.astro'
import { getImage } from 'astro:assets'
import DarkModeSwitch from '../components/DarkModeSwitch'

const { title, description, heroImage, category, author, draft, publishedDate } = Astro.props
  .content as Blog

const people = await Astro.glob<MarkdownInstance<Person>>(
  '../data/people/{*.mdx,*.md}'
)

const blogs = (await Astro.glob<MarkdownInstance<Blog>>(
  '../pages/blog/{*.mdx,*.md}'
)).filter((blog) => !blog.frontmatter.draft)

const blogsWithoutCurrent = blogs.filter(
  (blog) => blog.frontmatter.title !== title
)

type GroupedBlogs = {
  authorCategory: MarkdownInstance<Blog>[]
  category: MarkdownInstance<Blog>[]
  author: MarkdownInstance<Person>[]
}

// To index the blogs that share author && catagory or just one with the current blog
const groupedBlogs: GroupedBlogs = blogs.reduce(
  (coll, blog) => {
    if (blog.frontmatter.title !== title) {
      if (
        blog.frontmatter.author === author &&
        blog.frontmatter.category === category
      ) {
        coll.authorCategory.push(blog)
      } else if (blog.frontmatter.category === category) {
        coll.category.push(blog)
      } else if (blog.frontmatter.author === author) {
        coll.author.push(blog)
      }
    }
    return coll
  },
  { authorCategory: [], category: [], author: [] }
)

function sortBlogsFn(coll): MarkdownInstance<Blog>[] {
  return coll.sort((a, b) => {
    return (
      new Date(b.frontmatter.publishedDate).getTime() -
      new Date(a.frontmatter.publishedDate).getTime()
    )
  })
}

const sortedBlogs = [
  ...sortBlogsFn(groupedBlogs.authorCategory),
  ...sortBlogsFn(groupedBlogs.category),
  ...sortBlogsFn(groupedBlogs.author)
]

// To take only the 3 top matches
const slicedBlogs = sortedBlogs.slice(0, 3)

const allSortedBlogs = sortBlogsFn(blogsWithoutCurrent).slice(0, 3)

const uniqueBlogs: MarkdownInstance<Blog>[] = allSortedBlogs.reduce(
  (coll, blog) => {
    const currentTitle = blog.frontmatter.title
    const isDuplicate = slicedBlogs.find(
      (blog) => blog.frontmatter.title === currentTitle
    )
    if (isDuplicate) return coll
    else {
      coll.push(blog)
      return coll
    }
  },
  []
)

const finalBlogs = [...slicedBlogs, ...uniqueBlogs].slice(0, 3)

const isDev = import.meta.env.DEV

const heroAuthorImports = {
  heroImageImport: (heroImage) => import(`../assets/blog/${heroImage}.jpg`),
  authorImageImport: (authorImage) =>
    import(`../assets/people/${authorImage}.jpg`)
}

const finalResources = await parseBlogs({
  rawBlogs: finalBlogs,
  rawPeople: people,
  getImage,
  isDev: isDev,
  ...heroAuthorImports
})

const person = people.find((person) => person.frontmatter.code === author)

if (!person) {
  throw new Error(`Author ${author} not found`)
}

const {
  frontmatter: { name, lastName, jobTitle, image, expert, expertDraft }
} = person

const isExpert = (expert && !expertDraft) || (isDev && expert)

const blogHref = Astro.url.href
const shareIconStyle =
  'fill-zinc-800 dark:fill-zinc-300 hover:fill-juxt dark:hover:fill-juxt transition-colors'

const heroImageFilename = `${heroImage.split('.').slice(0, -1)}`
const personImageFilename = image.split('.').slice(0, -1)
const categoryHref = `/blog?${encodeURI(
  `blog[refinementList][category][0]=${category}`
)}`
---

<Layout
  navbar
  title={title}
  ogTitle={`JUXT Blog: ${title}`}
  ogDescription={description}
  ogImage={heroImageFilename}
>
  <DraftBanner draft={draft} pageName='Blog' />
  <main
    class='transition-colors dark:bg-gray-900'
    data-pagefind-filter="blog:true"
    data-published-date={publishedDate}
    data-pagefind-meta="publishedDate[data-published-date]"
  >
    <div class='px-4 sm:px-12 2xl:px-0 max-w-7xl mx-auto'>
      <div class='flex flex-col lg:flex-row gap-12 items-center pt-10'>
        <div
          class='flex text-center max-w-xl mx-auto lg:text-left lg:max-w-none lg:w-1/2 lg:mx-0 flex-col lg:justify-center items-center lg:items-start'
        >
          <div class='w-full flex gap-1 pb-1 items-center'>
            <TagIcon className='w-4 h-4 stroke-juxt dark:stroke-slate-300' />
            <a
              href={categoryHref}
              class='text-juxt hover:underline font-medium font-mono dark:text-zinc-300 uppercase text-sm'
              data-pagefind-meta="category"
            >
              {category}
            </a>
            <div class="grow" />
            <div class="text-juxt font-medium font-mono dark:text-zinc-300 uppercase text-sm">
              {formatDate(publishedDate)}
            </div>
          </div>
          <h1
            class='text-black text-4xl dark:text-white font-semibold leading-tight pb-4'
          >
            {title}
          </h1>
          <h2 class='text-lg text-zinc-600 dark:text-zinc-300' data-pagefind-meta="description">
            {description}
          </h2>
          <a
            href={isExpert ? `/people/${author}` : '#'}
            class:list={[
              'group flex gap-4 w-fit items-center pt-12',
              { 'cursor-default': !isExpert }
            ]}
          >
            <div class='flex-shrink-0 flex flex-col gap-3'>
              <div class='w-24 h-24 rounded relative overflow-hidden'>
                <Image
                  width={200}
                  quality={80}
                  alt='author picture'
                  class='absolute w-full h-full object-cover'
                  src={import(`../assets/people/${personImageFilename}.jpg`)}
                  data-pagefind-meta="personImage[src]"
                />
              </div>
            </div>
            <div class='flex flex-col gap-1 text-left'
                 data-name={name}
                 data-last-name={lastName}
                 data-job-title={jobTitle}
                 data-pagefind-meta="personName[data-name], personLastName[data-last-name], personJobTitle[data-job-title]"
            >
              {
                name && lastName && (
                  <div
                    class:list={[
                      'text-lg font-bold text-black dark:text-zinc-100 underline-offset-2',
                      { 'group-hover:underline': isExpert }
                    ]}
                  >
                    <div>{`${name} ${lastName}`}</div>
                  </div>
                )
              }
              {
                jobTitle && (
                  <div class='text-zinc-700 leading-snug w-36 dark:text-zinc-300'>
                    {jobTitle}
                  </div>
                )
              }
            </div>
          </a>
        </div>
        <Image
          alt='image'
          width={900}
          quality={90}
          class='w-full max-w-3xl lg:max-w-none lg:w-1/2 aspect-square object-cover'
          src={import(`../assets/blog/${heroImageFilename}.jpg`)}
          data-pagefind-meta="heroImage[src]"
        />
      </div>

      <div
        class='pb-20 pt-6 flex justify-center items-center gap-4 lg:justify-end'
      >
        <DarkModeSwitch client:only class={shareIconStyle} />
        <div class='flex justify-around text-sm items-center'>
          <a
            class='w-6 h-6'
            target='_blank'
            href={`https://twitter.com/intent/tweet?url=${blogHref}&title=${title}`}
          >
            {(<TwitterIcon className={shareIconStyle} />)}
          </a>
        </div>
        <div class='flex justify-around text-sm items-center'>
          <a
            class='w-6 h-6'
            target='_blank'
            href={`https://www.reddit.com/submit?url=${blogHref}&title=${title}`}
          >
            {(<RedditIcon className={shareIconStyle} />)}
          </a>
        </div>
        <div class='flex justify-around text-sm items-center'>
          <a
            class='w-6 h-6'
            target='_blank'
            href={`https://www.linkedin.com/sharing/share-offsite/?url=${blogHref}&title=${title}`}
          >
            {(<LinkedInIcon className={shareIconStyle} />)}
          </a>
        </div>
      </div>
    </div>

    <article
      class='px-4 pb-20 lg:px-0 mx-auto prose prose-a:text-juxt hover:prose-a:text-black prose-a:transition-colors dark:prose-invert dark:hover:prose-a:text-white'
    >
      <slot />
    </article>
    <div
      class='text-4xl text-zinc-600 dark:text-zinc-300 text-center font-bold pb-14'
    >
      Recommended Resources
    </div>
    <div
      class='grid md:grid-cols-[repeat(2,_24rem)] xl:grid-cols-[repeat(3,_24rem)] justify-center gap-10 pb-24'
    >
      {
        finalResources.map((blog) => (
          <div>
            <BlogCard {...blog} />
          </div>
        ))
      }
    </div>
  </main>
</Layout>
